<?xml version="1.0" encoding="UTF-8"?>
<config>
    <TCP bind_addr="localhost"
         bind_port="7800"/>

    <!--
      The TCPPING protocol takes a set of known members and ping them for discovery. This is essentially a static
      configuration. It works on top of TCP.

      The TCPPING protocol layer retrieves the initial membership in answer to the GMS's FIND_INITIAL_MBRS event.
      The initial membership is retrieved by directly contacting other group members, sending point-to-point membership
      requests. The responses should allow us to determine the coordinator whom we have to contact in case we want to
      join the group. When we are a server (after having received the BECOME_SERVER event), we'll respond to TCPPING
      requests with a TCPPING response.

      The FIND_INITIAL_MBRS event will eventually be answered with a FIND_INITIAL_MBRS_OK event up the stack.

      The TCPPING protocol requires a static configuration, which assumes that you to know in advance where to find
      other members of your group. For dynamic discovery, use the PING protocol, which uses multicast discovery, or the
      TCPGOSSIP protocol, which contacts a Gossip Router to acquire the initial membership.

      timeout: the maximum number of milliseconds to wait for any responses.
      num_initial_members: the maximum number of responses to wait for unless timeout has expired. The default is 2.
      initial_hosts: comma-seperated list of addresses (e.g., host1[12345],host2[23456]) for pinging.
      port_range: specifies the number of consecutive ports to be probed when getting the initial membership, starting
                  with the port specified in the initial_hosts parameter. Given the current values of port_range and
                  initial_hosts above, the TCPPING layer will try to connect to hosta:2300, hosta:2301, hosta:2302,
                  hostb:3400, hostb:3401, hostb:3402, hostc:4500, hostc:4501, hostc:4502. The configuration options
                  allows for multiple nodes on the same host to be pinged.
    -->
    <TCPPING timeout="3000"
             initial_hosts="localhost[7900]"
             port_range="1"
             num_initial_members="2"/>

    <!--
      The NAKACK protocol is used for multicast messages. It uses NAK. Under this protocol, each message is tagged with
      a sequence number. The receiver keeps track of the sequence numbers and deliver the messages in order. When a gap
      in the sequence number is detected, the receiver asks the sender to retransmit the missing message.

      retransmit_timeout: the retransmission timeout (in milliseconds). It is the same as the timeout attribute in the
                          UNICAST protocol.

      use_mcast_xmit: determines whether the sender should send the retransmission to the entire cluster rather than
                      just the node requesting it. This is useful when the sender drops the pocket - so we do not need
                      to retransmit for each node.

      max_xmit_size: maximum size for a bundled retransmission, if multiple packets are reported missing.

      discard_delivered_msgs: whether to discard delivery messages on the receiver nodes. By default, we save all
                              delivered messages. However, if we only ask the sender to resend their messages, we can
                              enable this option and discard delivered messages.
    -->
    <pbcast.NAKACK
                   use_mcast_xmit="false" gc_lag="0"
                   retransmit_timeout="300,600,1200,2400,4800"
                   discard_delivered_msgs="true"/>

    <!--
      The UNICAST protocol is used for unicast messages. It uses ACK. In the ACK mode, the sender resends the message
      until the acknowledgment is received from the receiver.

      timeout: the retransmission timeout (in milliseconds). For instance, if the timeout is "100,200,400,800", the
               sender resends the message if it hasn't received an ACK after 100 ms the first time, and the second
               time it waits for 200 ms before resending, and so on.
    -->
    <UNICAST timeout="300,600,1200" />

    <!--
      In a JGroups cluster, all nodes have to store all messages received for potential retransmission in case of a
      failure. However, if we store all messages forever, we will run out of memory. So, the distributed garbage
      collection service in JGroups periodically purges messages that have seen by all nodes from the memory in each
      node.

      desired_avg_gossip: intervals (in milliseconds) of garbage collection runs. Value 0 disables this service.
      max_bytes: the maximum number of bytes received before the cluster triggers a garbage collection run. Value 0
                 disables this service.
      max_gossip_runs: the maximum garbage collections runs before any changes. After this number is reached, there is
                       no garbage collection until the message is received.

      Note: Set the max_bytes attribute when you have a high traffic cluster.
    -->
    <pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000"
                   max_bytes="400000"/>

    <VIEW_SYNC avg_send_interval="60000"/>

    <!--
      The group membership service in the JGroups stack maintains a list of active nodes. It handles the requests to
      join and leave the cluster. It also handles the SUSPECT messages sent by failure detection protocols. All nodes
      in the cluster, as well as the load balancer and client side interceptors, are notified if the group membership
      changes.

      join_timeout: the maximum number of milliseconds to wait for a new node JOIN request to succeed. Retry afterwards.
      join_retry_timeout: the maximum number of milliseconds to wait after a failed JOIN to re-submit it.
      print_local_addr: whether to dump the node's own address to the output when started.
      disable_initial_coord: whether to prevent this node as the cluster coordinator.
    -->
    <pbcast.GMS print_local_addr="true" join_timeout="3000"
                view_bundling="true"/>
</config>