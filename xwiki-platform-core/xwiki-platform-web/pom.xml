<!--
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.xwiki.platform</groupId>
    <artifactId>xwiki-platform-core</artifactId>
    <version>3.1-SNAPSHOT</version>
  </parent>
  <artifactId>xwiki-platform-web</artifactId>
  <name>XWiki Platform - WAR Distribution</name>
  <packaging>war</packaging>
  <description>The WAR distribution for XWiki platform</description>
  <dependencies>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-oldcore</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Add the GWT JAR so that XWiki Core is GWT-ready and so that the XWiki GWT Servlet can
         be activated by default in web.xml -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-gwt-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-wysiwyg-war</artifactId>
      <version>${project.version}</version>
      <type>war</type>
    </dependency>
    <!-- The WebDAV module -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-webdav-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- The REST module -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rest-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- The annotations modules -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-core</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-reference</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-io</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-maintainer</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-rest</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-annotation-scripting</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Extension Manager -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-extension-handler-jar</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-extension-handler-xar</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-extension-script</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-extension-repository-aether</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-extension-repository-xwiki-client</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Default macros dependencies, so that they are packed in the war
         Please try to keep them in alphabetical order -->    
   <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-box</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-chart-macro</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-code</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-container</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>    
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-dashboard</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-footnotes</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-formula-macro</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-gallery</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-groovy</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-python</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-html</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-id</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-include</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-message</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-rss</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-macro-toc</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-useravatar</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-velocity</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-rendering-macro-cache</artifactId>
      <version>${project.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <!-- XWiki syntax parsers -->
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-syntax-doxia</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-syntax-xwiki2</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-syntax-xhtml</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.rendering</groupId>
      <artifactId>xwiki-rendering-syntax-xwiki10</artifactId>
      <version>${rendering.version}</version>
      <!-- Only needed at runtime since it's a component implementation -->
      <scope>runtime</scope>
    </dependency>
    <!-- Office -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-office-viewer</artifactId>
      <version>${project.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-office-macro</artifactId>
      <version>${project.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- Skin modules
         Note: even though the dependency plugin below doesn't need explicit dependencies set
         to work it's a best practice to put them here since they are real dependencies -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-albatross</artifactId>
      <version>${project.version}</version>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-toucan</artifactId>
      <version>${project.version}</version>
      <type>zip</type>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-colibri</artifactId>
      <version>${project.version}</version>
      <type>zip</type>
    </dependency>
    <!-- Decide which logging implementation of SLF4J to use -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>0.9.28</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- Needed for JSR 303 (Bean Validation) clients such as xwiki-core properties.
         It is just one JSR 303 implements among others so it's distribution decision to choose this one.
         Note that hibernate-validator depends on Java 6 since 4.1 branch.
    -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>4.0.2.GA</version>
      <scope>runtime</scope>
    </dependency>
    <!-- Captcha component -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-captcha</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Crypto Module -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-crypto</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- CSRF protection -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-csrf</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Legacy / Backward compatibility -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-legacy</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Event & Message Stream Modules -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-eventstream</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-messagestream</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- XML Script Service -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-xml-script</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Filesystem attachment storage -->
    <dependency>
      <groupId>org.xwiki.platform</groupId>
      <artifactId>xwiki-platform-store-filesystem-attachments</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>
  <properties>
    <!-- Don't run CLIRR on the .war since there's no Java code here. -->
    <xwiki.clirr.skip>true</xwiki.clirr.skip>
  </properties>
  <build>
    <plugins>
      <!-- Inject XWiki's configuration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-remote-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>xwiki-configuration-resources</id>
            <!-- The remote resources plugin adds its output directory as a resource directory
                 so that the Maven resources plugin copies these resources to target/classes.
                 However copying them to target/classes will make them appear in WEB-INF/classes
                 in the generated WAR since the WAR plugin copies resources in target/classes in
                 WEB-INF/classes. Thus to prevent this we're binding this execution to a phase
                 that comes after the execution of the resources plugin (which executes in the
                 process-resources phase). Thus this remote resources plugin will execute just
                 after the resources plugin and the resources won't be copied, which is why we're
                 adding a webResource configuration element below in the WAR plugin's
                 configuration. -->
            <phase>process-resources</phase>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <resourceBundles>
                <resourceBundle>org.xwiki.platform:xwiki-platform-tool-configuration-resources:${project.version}</resourceBundle>
              </resourceBundles>
              <properties>
                  <!-- Configuration data for hibernate.cfg.xml -->
                  <xwikiDbConnectionUrl>none</xwikiDbConnectionUrl>
                  <!-- Configuration data for xwiki.cfg -->
                  <xwikiCfgPlugins>\
                    com.xpn.xwiki.monitor.api.MonitorPlugin,\
                    com.xpn.xwiki.plugin.calendar.CalendarPlugin,\
                    com.xpn.xwiki.plugin.feed.FeedPlugin,\
                    com.xpn.xwiki.plugin.ldap.LDAPPlugin,\
                    com.xpn.xwiki.plugin.google.GooglePlugin,\
                    com.xpn.xwiki.plugin.mail.MailPlugin,\
                    com.xpn.xwiki.plugin.packaging.PackagePlugin,\
                    com.xpn.xwiki.plugin.query.QueryPlugin,\
                    com.xpn.xwiki.plugin.svg.SVGPlugin,\
                    com.xpn.xwiki.plugin.charts.ChartingPlugin,\
                    com.xpn.xwiki.plugin.fileupload.FileUploadPlugin,\
                    com.xpn.xwiki.plugin.image.ImagePlugin,\
                    com.xpn.xwiki.plugin.userdirectory.UserDirectoryPlugin,\
                    com.xpn.xwiki.plugin.usertools.XWikiUserManagementToolsImpl,\
                    com.xpn.xwiki.plugin.zipexplorer.ZipExplorerPlugin,\
                    com.xpn.xwiki.plugin.autotag.AutoTagPlugin,\
                    com.xpn.xwiki.plugin.lucene.LucenePlugin,\
                    com.xpn.xwiki.plugin.diff.DiffPlugin,\
                    com.xpn.xwiki.plugin.rightsmanager.RightsManagerPlugin
                  </xwikiCfgPlugins>
                  <xwikiCfgVirtual>0</xwikiCfgVirtual>
                  <xwikiCfgExo>0</xwikiCfgExo>
                  <xwikiCfgEditCommentMandatory>0</xwikiCfgEditCommentMandatory>
                  <xwikiCfgDefaultSkin>colibri</xwikiCfgDefaultSkin>
                  <xwikiCfgDefaultBaseSkin>colibri</xwikiCfgDefaultBaseSkin>
                  <xwikiCfgEncoding>UTF-8</xwikiCfgEncoding>
                  <xwikiCfgAdditionalProperties />
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Unpack the Albatross Skin -->
      <plugin>
        <!-- Make sure the skins dir exists since Maven or its plugins doesn't always create it if
             doesn't exist. Note that it works fine without this in Maven 2.1.x for some reason
             but fails in Maven 2.0.x. -->
        <!-- Also make sure the minimized dir exists, since it is created only in some profiles -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <!-- Note that we need a phase that executes before prepare-package as otherwise the
                 Antrun plugin executes after the dependency plugin below. This is fixed in
                 Maven 2.1 (http://jira.codehaus.org/browse/MNG-2258). -->
            <phase>test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <mkdir dir="${project.build.directory}/skin" />
                <mkdir dir="${project.build.directory}/minimized" />
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <!-- Right phase is prepare-package, but it is only in maven-2.1
            <phase>prepare-package</phase>-->
            <phase>test</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.xwiki.platform</groupId>
                  <artifactId>xwiki-platform-albatross</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.xwiki.platform</groupId>
                  <artifactId>xwiki-platform-toucan</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.xwiki.platform</groupId>
                  <artifactId>xwiki-platform-colibri</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <!-- We extract SmartClient library from smartGWT since smartGWT will 
                       use SmartClient from web-standard resources -->
                  <groupId>com.smartgwt</groupId>
                  <artifactId>smartgwt</artifactId>
                  <version>${smartgwt.version}</version>
                  <type>jar</type>
                  <outputDirectory>${project.build.directory}/smartclient</outputDirectory>
                  <!-- We exlude the default initsc.js file since we provide a modified 
                       version of it in web-standard sources -->
                  <excludes>**/initsc.js</excludes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- TODO: Find a way to exclude the LICENSE/NOTICE files from the classes/ directory since
           we're including them in META-INF/ at the root of the WAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <dependentWarExcludes />
          <webResources>
            <!-- Include Configuration resources -->
            <resource>
              <directory>${project.build.directory}/maven-shared-archive-resources</directory>
              <targetPath>WEB-INF</targetPath>
              <includes>
                <include>hibernate.cfg.xml</include>
                <include>xwiki.cfg</include>
                <include>xwiki.properties</include>
              </includes>
            </resource>
            <!-- Include License resources -->
            <resource>
              <directory>${project.build.directory}/maven-shared-archive-resources/META-INF</directory>
              <targetPath>META-INF</targetPath>
            </resource>
            <resource>
              <directory>${basedir}/src/main/webInfResources</directory>
              <targetPath>WEB-INF</targetPath>
              <filtering>true</filtering>
            </resource>
            <!-- Add the skins -->
            <resource>
              <directory>${project.build.directory}/skin</directory>
              <targetPath>skins</targetPath>
              <filtering>false</filtering>
            </resource>
            <!-- Add SmartClient library -->
            <resource>
              <directory>${project.build.directory}/smartclient/com/smartclient/public/sc</directory>
              <targetPath>resources/js/smartclient</targetPath>
              <filtering>false</filtering>
            </resource> 
            <!-- Add SmartClient skins -->
            <resource>
              <directory>${project.build.directory}/smartclient/com/smartclient/theme/enterprise/public/sc/skins</directory>
              <targetPath>resources/js/smartclient/skins</targetPath>
              <filtering>false</filtering>
            </resource>
            <resource>
              <directory>${project.build.directory}/minimized</directory>
              <targetPath>/</targetPath>
              <filtering>false</filtering>
            </resource>
          </webResources>
          <!-- - Make sure we exclude JCL and LOGJ4 since we want all logging to go through SLF4J
               - Excluded to prevent conflict in the patched version of Rhino used by yuicompressor used for JSX.
                 See http://jira.xwiki.org/jira/browse/XWIKI-6151 for more details.

               Note: We use ?????? because we need to exclude log4j-1.2.16 but keep log4j-over-slf4j-1.6.1.jar
                     See http://jira.codehaus.org/browse/MWAR-81
           -->
          <packagingExcludes>
            WEB-INF/lib/batik-js-*.jar,WEB-INF/lib/commons-logging-*.jar,WEB-INF/lib/log4j-??????.jar
          </packagingExcludes>
        </configuration>
      </plugin>
      <!-- Ensure that some modules are not added as dependencies.  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>org.jmock:*</exclude>
                    <exclude>junit:*</exclude>
                    <exclude>javax.servlet:servlet-api:*:*:compile</exclude>
                  </excludes>
                  <includes>
                    <!-- Allow only JUnit and JMock with scope test because -->
                    <include>org.jmock:*:*:*:test</include>
                    <include>junit:*:*:*:test</include>
                  </includes>
                </bannedDependencies>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!-- Javascript and CSS files compression -->
        <plugin>
          <groupId>net.alchim31.maven</groupId>
          <artifactId>yuicompressor-maven-plugin</artifactId>
          <version>1.1</version>
          <configuration>
            <!-- Don't output in the default webapp location, since the war plugin will overwrite the files in there
                 with the original, uncompressed ones. -->
            <webappDirectory>${project.build.directory}/minimized</webappDirectory>
            <jswarn>false</jswarn>
            <!-- Overwrite existing files -->
            <nosuffix>true</nosuffix>
            <includes>
              <include>resources/js/**.js</include>
              <include>resources/js/**.css</include>
              <include>resources/uicomponents/**.js</include>
              <include>resources/uicomponents/**.css</include>
            </includes>
            <excludes>
              <!-- Exclude already minified files -->
              <exclude>**/*-min.js</exclude>
              <exclude>**/*-debug.js</exclude>
              <exclude>**/langs/*.js</exclude>
              <!-- Exclude files with Velocity inside -->
              <exclude>**/actionButtons.js</exclude>
              <exclude>**/notification.css</exclude>
              <exclude>**/usersandgroups.js</exclude>
              <exclude>**/columns.css</exclude>
              <exclude>**/gallery.css</exclude>
              <exclude>**/searchSuggest.js</exclude>
            </excludes>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <profiles>
    <profile>
      <id>debug</id>
      <!-- The debug profile doesn't have any property, its goal is to avoid JS/CSS compression -->
    </profile>
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <!-- Javascript and CSS files compression -->
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>yuicompressor-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>minify</id>
                <goals>
                  <goal>compress</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jettyrun</id>
      <build>
        <plugins>
          <!-- Run 'mvn install -Pjettyrun' to execute xwiki in Jetty. Useful for testing.
               Note: You'll need a database set up and running. If you use the HSQLDB profile
               the database is looked for in database/ so it's very likely you'll get an
               empty wiki. You'll need to import some pages in it using a XAR for example. -->
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>maven-jetty-plugin</artifactId>
            <configuration>
              <contextPath>/xwiki</contextPath>
              <classesDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF</classesDirectory>
              <webAppSourceDirectory>${project.build.directory}/${project.build.finalName}/</webAppSourceDirectory>
              <scanIntervalSeconds>10</scanIntervalSeconds>
              <connectors>
                <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                  <port>8080</port>
                  <maxIdleTime>60000</maxIdleTime>
                </connector>
              </connectors>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <!-- Add the database JAR since it's not included in the WAR. The Hibernate config
                 file is automtically added by the remote resources plugin -->
            <dependencies>
              <dependency>
                <groupId>${xwiki.db.jdbc.groupId}</groupId>
                <artifactId>${xwiki.db.jdbc.artifactId}</artifactId>
                <version>${xwiki.db.jdbc.version}</version>
                <scope>runtime</scope>
              </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-remote-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>xwiki-configuration-resources</id>
                <configuration>
                  <properties>
                    <xwikiDbConnectionUrl>${xwiki.db.connection.url}</xwikiDbConnectionUrl>
                  </properties>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>ci</id>
      <activation>
        <!-- This property is automatically defined by the Release profile in the top level POM when executing
             a release. Thus this profile will be automatically enabled when releasing -->
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Javascript and CSS files compression -->
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>yuicompressor-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>minify</id>
                <goals>
                  <goal>compress</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>clover</id>
      <!-- Add the Clover JAR to the WAR so that it's available at runtime. It's needed because instrumented jars in
           the WAR will call Clover APIs at runtime when they execute. -->
      <dependencies>
        <dependency>
          <groupId>com.cenqua.clover</groupId>
          <artifactId>clover</artifactId>
          <version>3.0.2</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
